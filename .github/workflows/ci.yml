name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  test:
    strategy:
      matrix:
        go-version: ["1.22", "1.23"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install libvips (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Install libvips (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install vips

      - name: Install libvips (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install vips -y
          echo "C:\tools\vips\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...
        env:
          CGO_ENABLED: 1
          PKG_CONFIG_PATH: ${{ matrix.os == 'windows-latest' && 'C:\tools\vips\lib\pkgconfig' || '' }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install libvips
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install libvips
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Download dependencies
        run: go mod download

      - name: Run coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          CGO_ENABLED: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
