name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  test:
    strategy:
      matrix:
        go-version: ["1.22", "1.23"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install libvips (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Install libvips (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install vips

      - name: Install libvips (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Download vips Windows binary
          $vipsVersion = "8.15.1"
          $vipsUrl = "https://github.com/libvips/libvips/releases/download/v${vipsVersion}/vips-dev-w64-all-${vipsVersion}.zip"
          $vipsZip = "vips.zip"
          $vipsDir = "C:\vips"
          
          Write-Host "Downloading vips from $vipsUrl"
          Invoke-WebRequest -Uri $vipsUrl -OutFile $vipsZip
          
          Write-Host "Extracting vips to $vipsDir"
          Expand-Archive -Path $vipsZip -DestinationPath $vipsDir -Force
          
          # Find the actual vips directory (it's usually nested)
          $vipsBin = Get-ChildItem -Path $vipsDir -Filter "bin" -Recurse -Directory | Select-Object -First 1
          
          Write-Host "Adding to PATH: $($vipsBin.FullName)"
          echo "$($vipsBin.FullName)" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Set PKG_CONFIG_PATH
          $vipsPkgConfig = Get-ChildItem -Path $vipsDir -Filter "pkgconfig" -Recurse -Directory | Select-Object -First 1
          echo "PKG_CONFIG_PATH=$($vipsPkgConfig.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...
        env:
          CGO_ENABLED: 1

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install libvips
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install libvips
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Download dependencies
        run: go mod download

      - name: Run coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          CGO_ENABLED: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
